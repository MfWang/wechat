<style lang="less">
  Page{
    background: #000;
    height: 100vh;
    overflow: hidden;
  }
  .result{
    height: 100vh;
    overflow: hidden;
  }
  .title{
    font-size: 28rpx;
    color: #FFFFFF;
  }
  .res{
    font-size: 28rpx;
    color: #D55397;
  }
  .tip{
    font-size: 24rpx;
    color: rgba(255,255,255,0.54);
    display: block;
  }
  .result_1{
    padding: 0 30rpx;
  }
  .result_2{
    padding: 0 30rpx;
  }
  .result_1 .res{
    display: block;
    margin-top: 24rpx;
    position: absolute;
    top: 50rpx;
    left: 30rpx;
  }
  .result_img{
    width: 690rpx;
    height: 200rpx;
    border-radius: 8rpx;
    margin: 92rpx auto 140rpx auto;
    position: relative;
  }
  .result_img .no_pic{
    width: 690rpx;
    height: 110rpx;
    background: #fff;
  }
   .result_img .no_pic .img {
    width: 690rpx;
    height: 110rpx;
  }
  .canvas_group{
    width: 690rpx;
    height: 200rpx;
    background: transparent;
    position: relative;
  }
  .canvas_tip{
    width: 690rpx;
    height: 200rpx;
    background: transparent;
    position: absolute;
    top: 0;
    left: 0;
  }
  .cropper{
    width: 690rpx;
    height: 110rpx;
    // background: #fff;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%,-50%);
  }
  .result_img .t{
    position: absolute;
    font-size: 30rpx;
    color: #FFFFFF;
    top: 0;
    margin-left: -25rpx;
    /* left: calc(62% - 15rpx); */
  }
  .result_img .c{
    position: absolute;
    font-size: 30rpx;
    color: #FFFFFF;
    top: 0;
    margin-left: -15rpx;
    /* left: calc(59% - 30rpx); */
  }
  .result_img .line{
    width: 2rpx;
    height: 162rpx;
    border-right: 4rpx dotted #E56BAB;
    position: absolute;
    top: 26rpx;
  }

  .result_2 .res{
    margin-left: 27rpx;
  }
  .result_2_img{
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .result_2_img_item{
    width: 192rpx;
    height: 138rpx;
    background: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    font-size: 24rpx;
    color: rgba(0,0,0,0.54);
    border: 6rpx solid #fff;
    border-radius: 8px;
    margin: 60rpx 0 40rpx 0;
  }
  .result_2_img_item.active{
    border: 6rpx solid #E56CAC;
  }
  .result_2_img .img{
    width: 150rpx;
    height: 40rpx;
    margin-bottom: 16rpx;
  }

  .cropper-buttons{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 220rpx;
    text-align: center;
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 10;
    background-color: rgba(0, 0, 0, 0.95);
  }

  .back{
    width: 96rpx;
    height: 96rpx;
    background: #878787;
    border-radius: 100%;
    margin-right: 279rpx;
    line-height: 96rpx;
    color: #D8D8D8;
  }
  .back .iconfont{
    font-size: 50rpx;
  }
  .complete{
    width: 96rpx;
    height: 96rpx;
    background: #fff;
    border-radius: 100%;
    line-height: 96rpx;
    color: #E87AB4;
  }
  .complete .iconfont{
    font-size: 50rpx;
  }

</style>

<template>
  <view class="result">
    <view class="result_1">
      <text class="title">1. 智能识别出的位置（T为测试线，C为参考线）</text>
      <text class="title">{{testImg}}</text>
      <text class="res" wx:if="{{result.lineY === 0}}">说明：上传的图片中没有检测到试纸</text>
      <text class="res" wx:elif="{{result.detectType === 3}}">说明：未检测到参考线</text>
      <view class="result_img">
        <view class="no_pic" wx:if="{{result.lineY === 0}}"><image class="img" src="../images/no_pic.png"></image></view>
        <view class="canvas_group" wx:else>
          <canvas class="cropper" canvas-id="cropper" ></canvas>
          <canvas class="canvas_tip" canvas-id="canvastip"></canvas>
        </view>
      </view>
    </view>
    <view class="result_2">
      <text class="title">2. 检测结果：</text>
      <text class="res">LH{{lh}}</text>
      <view class="result_2_img">
        <block wx:for="{{results}}" wx:key="{{index}}">
          <view
            class="result_2_img_item {{index == resultIndex ? 'active' : ''}}"
            data-wepy-params="{{index}}"
            bindtap="changeResult"
          >
            <image class="img" src="{{item.img}}"></image>
            <text>{{item.name}}</text>
          </view>
        </block>
      </view>
      <text class="tip">说明：您可以尝试重新拍摄，如果您已经很清楚排卵试纸的状态，也可以选择直接标记状态并保存即可。</text>
    </view>

    <view class="cropper-buttons">
      <view class="back" bindtap="takePhoto"><text class="iconfont icon-btn_back"></text> </view>
      <view class="complete" bindtap="uploadOvulation"> <text class="iconfont icon-btn_correct"></text> </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'

  export default class Result extends wepy.page {
    config = {
      navigationBarBackgroundColor: '#000',
      navigationBarTitleText: '智能监测结果',
      navigationBarTextStyle: '#fff',
      backgroundColor: 'black'
    }

    data = {
      testImg: '',
      result: {
        lineY: null
      },
      resultIndex: -1,
      lh: 0,
      results: [
        {
          'img': '../images/high.png',
          'name': '强阳'
        },
        {
          'img': '../images/low.png',
          'name': '弱阳'
        },
        {
          'img': '../images/peak.png',
          'name': '阴性'
        }
      ],
      canvasFlag: false
    }

    methods = {
      changeResult (event) {
        const self = this
        const result = self.result
        const index = parseInt(event.currentTarget.dataset.wepyParams, 10)
        if (index === result.resultIndex) {
          self.lh = result.lh
        } else {
          if (index === 0) {
            self.lh = 90
          } else if (index === 1) {
            self.lh = 50
          } else {
            self.lh = 0
          }
        }
        self.resultIndex = index
        self.$apply()
      },
      async takePhoto () {
        const self = this
        const parent = self.$parent
        const globalData = parent.globalData

        const pictureLocal = await parent.takePhoto()
        if (pictureLocal) {
          wepy.showLoading({
            title: '数据加载中',
            mask: true
          })
          const uploadInfo = await parent.getQiniuToken()
          const pictureOnline = await parent.uploadPhoto(pictureLocal, uploadInfo)
          if (pictureOnline) {
            globalData.pictureLocal = pictureLocal
            globalData.pictureOnline = pictureOnline
            const device = wepy.getSystemInfoSync()
            const width = device.windowWidth
            const drawW = Math.floor(690 / 750 * width)
            const drawH = Math.floor(110 / 750 * width)
            var ctx = wepy.createCanvasContext('cropper')
            ctx.clearRect(0, 0, drawW, drawH)
            ctx = wepy.createCanvasContext('canvastip')
            ctx.clearRect(0, 0, drawW, drawH)
            ctx.draw()
            self.getresult()
          } else {
            wepy.hideLoading()
            wepy.showModal({
              title: '提示',
              content: '上传图片失败,请重试',
              showCancel: false,
              success: function (res) {
                if (res.confirm) {
                  console.log('用户点击确定')
                }
              }
            })
          }
        }
      },
      uploadOvulation () {
        const self = this
        const result = self.result
        const resultIndex = self.resultIndex

        if (resultIndex === -1) {
          wepy.showModal({
            title: '提示',
            content: '请选择检测结果再上传',
            showCancel: false,
            success: function (res) {
              if (res.confirm) {
                console.log('用户点击确定')
              }
            }
          })
        } else if (result.lineY === 0) {
          wepy.showModal({
            title: '提示',
            content: '上传的图片中没有检测到试纸，继续提交？',
            showCancel: true,
            success: function (res) {
              if (res.confirm) {
                console.log('用户点击确定')
                self.uploadResult(false)
              } else if (res.cancel) {
                console.log('用户点击取消')
              }
            }
          })
        } else {
          self.uploadResult(true)
        }
      }
    }
    canvasSaveToImg () {
      return new Promise(function (resolve, reject) {
        console.log('canvasSaveToImg start')
        wepy.canvasToTempFilePath({
          canvasId: 'cropper',
          success: function(res) {
            console.log('canvasSaveToImg end')
            resolve(res.tempFilePath)
          }
        })
      })
    }
    async uploadResult (flag) {
      const self = this
      const parent = self.$parent
      const globalData = parent.globalData

      const bmUser = globalData.bmUser
      const result = self.result
      const resultIndex = self.resultIndex
      wepy.showLoading({
        title: '数据上传中',
        mask: true
      })
      const params = {
        detectType: result.detectType,
        lh: self.lh,
        lineY: result.lineY,
        refLineX: result.refLineX,
        resultType: result.resultType,
        testLineX: result.testLineX,
        timestamp: result.timestamp,
        timezone: result.timezone,
        triggerType: result.triggerType,
        value: result.value,
        originalImgUrl: result.originalImgUrl,
        imgUrl: ''
      }
      switch (resultIndex) {
        case 0:
          params.resultType = 3
          break
        case 1:
          params.resultType = 2
          break
        case 2:
          params.resultType = 1
          break
      }
      params.timestamp = Math.floor(new Date().valueOf() / 1000)
      if (flag) {
        const tailorLocal = await self.canvasSaveToImg()
        const uploadInfo = await parent.getQiniuToken()
        const tailorOnline = await parent.uploadPhoto(tailorLocal, uploadInfo)
        params.imgUrl = globalData.downloadUrl + '/' + tailorOnline
      }

      console.log('------注意----------')
      if (globalData.recordsToday === null) {
        var date = new Date()
        date.setHours(0)
        date.setMilliseconds(0)
        date.setSeconds(0)
        date.setMinutes(0)
        console.log('-----globalData.recordsToday==null')
        globalData.recordsToday = {
          timestamp: Math.floor(date.valueOf() / 1000),
          type: 'OVULATION_TEST',
          userId: bmUser.userId,
          familyMemberId: bmUser.selfMemberId,
          detail: params,
          appFlag: 1
        }
      } else {
        console.log('-----globalData.recordsToday!=null')
        globalData.recordsToday.detail.push(params)
      }
      var data = globalData.recordsToday
      data.detail = JSON.stringify(data.detail)
      wepy.request({
        url: `${globalData.bongmiAPI}/body_status/${bmUser.userId}/${bmUser.selfMemberId}?access_token=${bmUser.accessToken}`,
        data: data,
        header: {
          authorization: 'Lollypop-Weixin-Mini-Program'
        },
        method: 'PUT',
        success: function (res) {
          globalData.refreshToday = true
          globalData.refreshAll = true
          wepy.switchTab({
            url: '/pages/today'
          })
        }
      })
    }
    getresult () {
      const self = this
      const parent = self.$parent
      const globalData = parent.globalData
      const bmUser = globalData.bmUser
      console.log('getresult start')

      let pictureOnline = `${globalData.downloadUrl}/${globalData.pictureOnline}`
      pictureOnline = encodeURIComponent(pictureOnline)
      wepy.request({
        url: `${globalData.bongmiAPI}/body_status/${bmUser.userId}/ovulation?url=${pictureOnline}&is_whole=true`,
        data: {
          access_token: bmUser.accessToken
        },
        header: {
          authorization: 'Lollypop-Weixin-Mini-Program'
        },
        success: function (res) {
          console.log('getresult success')
          const result = res.data
          console.log(result)
          let resultIndex = ''
          if (result.lineY === 0) {
            resultIndex = -1
          } else {
            if (result.detectType === 3) {
              resultIndex = -1
            } else {
              if (result.resultType === 1) {
                resultIndex = 2
              } else if (result.resultType === 2) {
                resultIndex = 1
              } else if (result.resultType === 3) {
                resultIndex = 0
              }
            }
          }
          self.result = result
          self.resultIndex = resultIndex
          self.lh = result.lh
          result.resultIndex = resultIndex
          const imgInfo = {}
          wepy.getImageInfo({
            src: globalData.pictureLocal,
            success: function (res) {
              imgInfo.width = res.width
              imgInfo.height = res.height
              imgInfo.path = res.path

              const imgW = imgInfo.width
              const imgH = imgInfo.width * 110 / 690
              const corW = 0
              const corH = -(imgInfo.height * result.lineY / 100 - imgH / 2)
              const device = wepy.getSystemInfoSync()
              const width = device.windowWidth
              const height = device.windowHeight
              const drawW = 690 / 750 * width
              const drawH = 110 / 750 * width

              console.log(`imgInfo.width: ${res.width}`)
              console.log(`imgInfo.width: ${res.height}`)
              console.log(`imgInfo.width: ${res.path}`)
              console.log(`device width:${width}`)
              console.log(`device height:${height}`)
              console.log(`corW:${corW}`)
              console.log(`corH:${corH}`)
              console.log(`imgW:${imgW}`)
              console.log(`imgH:${imgH}`)
              console.log(`drawW:${drawW}`)
              console.log(`drawH:${drawH}`)
              var ctx = wepy.createCanvasContext('cropper')
              ctx.scale(drawW / imgInfo.width, drawW / imgInfo.width)
              ctx.drawImage(imgInfo.path, corW, corH)
              ctx.draw()
              if (result.detectType !== 3) {
                ctx = wepy.createCanvasContext('canvastip')
                const T = drawW * result.testLineX / 100
                const C = drawW * result.refLineX / 100
                console.log(`result.testLineX:${result.testLineX}`)
                console.log(`result.refLineX:${result.refLineX}`)
                console.log(`T drawW * result.testLineX / 100:${T}`)
                console.log(`C drawW * result.refLineX / 100:${C}`)
                ctx.setFontSize(15)
                ctx.setFillStyle('#FFFFFF')
                if (result.testLineX) {
                  ctx.fillText('T', T, 15)
                }
                if (result.refLineX) {
                  ctx.fillText('C', C, 15)
                }
                ctx.setFillStyle('#E56BAB')
                if (result.testLineX) {
                  for (let i = 20; i <= 100; i = i + 10) {
                    ctx.fillRect(T, i, 2, 5)
                  }
                }
                if (result.refLineX) {
                  for (let i = 20; i <= 100; i = i + 10) {
                    ctx.fillRect(C, i, 2, 5)
                  }
                }
                ctx.draw()
              }
            },
            fail: function (res) {
              console.log('fail')
              console.log(res)
            }
          })
          self.$apply()
          wepy.hideLoading()
        },
        fail: function () {
          console.log('getresult success')
        }
      })
    }

    onLoad (options) {
      const self = this
      wepy.showLoading({
        title: '数据加载中',
        mask: true
      })
      self.getresult()
    }
  }
</script>
